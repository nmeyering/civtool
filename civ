#!/bin/bash

if [ ! -d $XDG_CONFIG_HOME/civtool ]
then
	mkdir $XDG_CONFIG_HOME/civtool
	touch $XDG_CONFIG_HOME/civtool/exe_path
	touch $XDG_CONFIG_HOME/civtool/wine_path
	touch $XDG_CONFIG_HOME/civtool/player_name
	touch $XDG_CONFIG_HOME/civtool/user
	touch $XDG_CONFIG_HOME/civtool/game
	echo "set paths and player name in ${XDG_CONFIG_HOME}/civtool/ now.."
	exit
fi

exe_path=$(cat $XDG_CONFIG_HOME/civtool/exe_path)
wine_path=$(cat $XDG_CONFIG_HOME/civtool/wine_path)
player_name=$(cat $XDG_CONFIG_HOME/civtool/player_name)
game=$(cat $XDG_CONFIG_HOME/civtool/game)
user=$(cat $XDG_CONFIG_HOME/civtool/user)
# set this to the common server that will be used as a mailbox to exchange savegames
host=$(cat $XDG_CONFIG_HOME/civtool/host)
# set this to your opponent's IP address or hostname if you want to enable auto-pulling
opponent=$(cat $XDG_CONFIG_HOME/civtool/opponent)
# set this to the port to use for pulling and sending pull-requests
opponent=$(cat $XDG_CONFIG_HOME/civtool/port)
# can auto-pull
if which nc &> /dev/null && [[ -n $opponent ]] && [[ -n $port ]]
then
	autopull="yes"
fi

osd="osd_cat -f -*-*-medium-r-*--32-*-*-*-*-*-*-* -c green -S white -s 3 -u black -O 2 -A left"
osderr="osd_cat -f -*-*-medium-r-*--32-*-*-*-*-*-*-* -c red -S black -s 3 -u white -O 2 -A left"

civerr()
{
	echo $1
	$osderr <<< $1 &
}

civout()
{
	echo $1
	$osd <<< $1 &
}

repos_path="${wine_path}/My Games/civ4/Saves/pbem/${game}"
if [ ! -d "${repos_path}" ]
then
	echo "Repository path does not exist!"
	exit
fi
cd "${repos_path}"

if [ $# -eq 0 ]
then
	echo "Usage: civ [command]"
	echo "civ start - starts the game"
	echo "civ push - pushes your savegame to the git repos, removing old ones PERMANENTLY"
	echo "civ pull - gets new savegames from the other player"
	exit
fi

if [ ! -d .git ]
then
	echo "Please run this script from the root of a git repository."
	exit
fi

if [ -z "$exe_path" -o -z "$wine_path" -o -z "$player_name" -o -z "$game" -o -z "$user" -o -z "$host" ]
then
	echo "One or more variables need to be set first!"
	exit
fi

if [ $# -ne 1 ]
then
	echo "Specify exactly one command."
	exit
fi

civping()
{
	if [[ -n $autopull ]]
	then
		echo "pull-request" | nc $opponent $port
	fi
}

civstart()
{
	civout "Starting up: ${exe_path}/Civilization4.exe"
	wine "${exe_path}/Civilization4.exe" &> /dev/null &
	civ_pid=$!
	./civpushd &
	civpushd_pid=$!
	wait $civ_pid
	kill $civpushd_pid
}

civpull()
{
	if ! git pull
	then
		civerr "git pull failed!"
		exit
	fi
	if ! scp -r "$user@$host:/tmp/civ" /tmp/
	then
		civerr "scp failed while pulling!"
		exit
	fi
	latest_save="$(find /tmp/civ -type f -name "*.Civ4SavedGame" -not -regex ".*$player_name.*")"
	n=$(wc -l <<< "$latest_save")
	if [ $n -gt 1 ]
	then
		civerr "Multiple save games match in /tmp/civ."
		exit
	elif [ $n -eq 0 ]
	then
		civerr "No matching save game in /tmp/civ."
		exit
	fi
	# latest_foreign_save="$(find . -type f -name "*.Civ4SavedGame" -printf "%p %A@\n" | grep "$player_name" | sort | head -n 1 | awk '{printf($1)}')"
	# latest_own_save="$(find . -type f -name "*.Civ4SavedGame" -printf "%p %A@\n" | grep -v "$player_name" | sort | head -n 1 | awk '{printf($1)}')"
	if [ -z "${latest_save}" ]
	then
		civerr "No (new) save game found!"
		exit
	fi
	cp "${latest_save}" "./newest_to_${player_name}.Civ4SavedGame" &&
	rm -r /tmp/civ &&
	if [ $? -eq 0 ]
	then
		civout "civ pull successful"
	else
		civerr "civ pull failed!"
	fi
}

civpush()
{
	latest_save="$(find . -type f -name "*.Civ4SavedGame" -printf "%p %A@\n" | grep -v "$player_name" | sort | head -n 1 | awk '{printf($1)}')"
	if [ -z $latest_save ]
	then
		civerr "No new save game found to send to other player!"
		exit
	fi
	chmod 0777 "${latest_save}" &&
	if ! scp -p "${latest_save}" "$user@$host:/tmp/civ/from_${player_name}.Civ4SavedGame"
	then
		civerr "scp failed while pushing!"
		exit
	fi
	echo "${latest_save}" >> turns.txt
	echo "added ${latest_save} to turns.txt"
	tmp=$(mktemp)
	sort turns.txt | uniq > $tmp
	mv $tmp turns.txt

	if ! git add turns.txt
	then
		civerr "git add failed!"
		exit
	fi
	if ! git commit -m "Your turn!"
	then
		civerr "git commit failed!"
		exit
	fi
	if ! git push 
	then
		civerr "git push failed!"
		exit
	fi
	if find . -type f -name "*.Civ4SavedGame" -not -regex ".*newest_to_${player_name}.Civ4SavedGame" -delete
	then
		civout "push successful!"
		civping
	else
		civerr "push failed: couldn't find and remove the latest savegame!"
	fi
}

civstop()
{
	if kill -STOP $(pidof Civilization4.exe)
	then
		civout "suspended"
	else
		civerr "suspend failed!"
	fi
	exit
}

civcont()
{
	if kill -CONT $(pidof Civilization4.exe)
	then
		civout "resumed"
	else
		civerr "resume failed!"
	fi
}

case "$1" in 
	"start"	) civstart ;; 
	"pull"	) civpull ;;
	"push"	) civpush ;; 
	"stop" 	) civstop ;; 
	"pause" )	civstop ;;
	"suspend" ) civstop ;;
	"co*" ) civcont ;; 
	"resume" ) civcont ;; 
	"unpause"	) civcont ;; 
	* ) echo "unrecognized command" ;;
esac
